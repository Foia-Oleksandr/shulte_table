function session = getSession(id)
arguments
    id (1,1) uint64
end

sessionQueryTemplate = ...
    "SELECT id, begin_at, finish_at, complexity, json_group_array(ifnull(p.value, '')) as properties, view" + newline + ...
    "FROM session s" + newline + ...
    "         LEFT JOIN property p on p.session_id = s.id" + newline + ...
    "WHERE id = %d" + newline + ...
    "GROUP BY s.id;";
    
sessionQuery = sprintf(sessionQueryTemplate, id);
sessionResult = database.fetchData(sessionQuery);

taskDurationsQueryTemplate = "SELECT elapsed_minutes, task_duration, mistakes FROM result WHERE session_id = %d ORDER BY id ASC;";
taskDurationsQuery = sprintf(taskDurationsQueryTemplate, id);
results = database.fetchData(taskDurationsQuery);

if isempty(results)
    taskDurations = model.TaskDuration.empty;
else
    for k = height(results):-1:1
        taskDurations(k) = model.TaskDuration( ...
            results{k,'elapsed_minutes'}, ...
            results{k, 'task_duration'}, ...
            results{k, 'mistakes'});
    end
end

session = model.SessionResult( ...
            sessionResult.id, ...
            datetime(sessionResult.begin_at, 'ConvertFrom', 'posixtime'), ...
            datetime(sessionResult.finish_at, 'ConvertFrom', 'posixtime'), ...
            sessionResult.complexity, ...
            model.ShulteTableOrder.charToProperties(sessionResult.properties), ...
            model.ShulteTableView.(sessionResult.view), ...
            taskDurations);

mustBeA(session, "model.SessionResult");
end
